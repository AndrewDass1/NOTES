Kubernetes notes:



Kubernetes – A container system that is open source. Openshift is a platform that runs Kubernetes that has its own tools/operators to make it easier to manage applications

Helm is used with kubernetes as an easy way to manage and maintain deployments with minimal code changes

Update source code -> Build image, push (don’t say deploy, say push) image -> deploy on/from a service 

Basis:
App -> in Container -> Pod, pod within Kubernetes cluster

Pod needs service (access it), and then service needs ingress to expose it to the internet/world

Configmap + secrets for pod, maybe a volume

 

So many yaml files are packaged for the pod, service, ingress etc to be deployed

 

Kubectl – Command line tool used to run commands against Kubernetes clusters. It does this by auth with the Master node of your cluster and making API calls to do a variety of management actions. 

1 yaml file for each object, but once again package it to the entity

 Commands:
kubectl apply –f frontend.yaml 
kubectl apply –f frontend-service.yaml
kubectl apply –f ingress.yaml

kubectl get pods

 What is Helm – Helm is a package manager for Kubernetes

Package yaml files to Chart -> Helm -> Kubernetes api -> client
 

 
 

Use chart.yaml and templates, has the customizable yaml files which is affected by placeholder variables from values.yaml and sometimes helpers.tpl



Subcharts and requirements?
 

Chart.yaml – metadata
Templates – customize / affect it
Dependencies – charts, chart.yaml, mongo… and requirements

Documentation – LICENSE, readme, notes, values.schema.json
 
Crds – custom def for resources, test-connection yaml

Chart.yaml:
apiVersion: v2
name: chart-demo
description: A Helm chart for Kubernetes
keywords:
-	Demo
type: application
appVersion: 1.16.0
version: 0.1.0
dependencies:



Build Helm Chart:
1.	Create and cd into directory
2.	Add a Chart.yaml (vi Chart.yaml)
3.	In directory make another folder called “templates”
4.	cp ../../yaml/*.yaml templates

Actions | Commands
Install a release: helm install
Upgrade a release revision: helm upgrade
Rollback to a release revision: helm rollback
Print release history: helm history
Display release status: helm status
Show details of a release: helm get all
Uninstall a release: helm uninstall
List releases: helm list

Helm 3:
helm install [release] [chart]
helm install –generate-name [chart]

helm uninstall [release]
helm uninstall –keep-history [release]

helm get all [release]

