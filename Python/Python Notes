Python Official Guide: https://docs.python.org/3/tutorial/interpreter.html


Chapter 1
Python Notes: 

High-level language - high-level data types such as arrays and dictionaries

Modules:
I/O
System Calls
Sockets
Interfaces to graphical user interface toolkits like TK

An interpreted language - Save you considerable time during program development because no
complilation and linking is necessary



Chapter 2:
Interpreter - Program that converts the code a developer writes into an 
intermediate language, called byte code. It converts the code line by line, one at a 
time. It translates till the end and stops at that line where an error occurs, if any,
making the debugging process easy

Interpreter Source:
https://pythongeeks.org/interpreter-in-python/

Python is an interpreted language

Argument passing, use import sys to see what has been declared
Sys is a python module that uses commands that interacts with the interpreter


Steps:
Source code -> Interpreter (Compiler + PVM - python virtual machine) converts intermediate code 
to bytecode
Compiler converts the source code for PVM
PVM reads and executes the commands


>>> - Interactive mode

Source code encoding - UTF-8

Chapter 3
# -> Comments
+ -> addition
- -> subtraction
/ -> division
// -> floor division
* -> multiplication

round(variable, 2)
2 - placeholder for decimal places

' \' ' = single quote or " ' "

\" \" = double quote


r''

Lists:

Indexing:
variable_name[position]

indexing : [starting:ending], ex: ending = 7, goes to 6th value
Always goes to position before end



Concatenate: list1 + list2

.append() method

len()

Nested Lists:
list3 = [list1, list2]

list3[0][1] - get new position

new line - \n

Chapter 4 - More Control Flow Tools
if statements:

if x < 0:
   .....
   print()
elif x == 0:
   .....
   print()
else:
   print()
   
for statements:

for *variable* in words:
* where words is an already predefined variable that has a lot of elements

Range function:
range(start, end, increment)
  

Break and Continue:
Used only in for or while loops

Break resource: https://www.pythonpool.com/python-break/

pass - placeholder

Match:
match ....:
    case number or variable:
        return ""
        
Functions
def name(*variable1, variable2):
  code...
  
name()
